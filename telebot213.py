import telebot
from telebot import types
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Spotify API
SPOTIFY_CLIENT_ID = "b6d7daefa0c94517b25242ac3c51f2ee"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!
SPOTIFY_CLIENT_SECRET = "d97637714c5649abbfb117088f89d283"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify
client_credentials_manager = SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET
)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7615955330:AAFtfkET02AXFB8W0F9_Fm1kPOX9ocSkJ4w"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
bot = telebot.TeleBot(TOKEN)


def get_random_artist():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ Spotify"""
    try:
        results = sp.search(q='year:2020-2023', type='track', limit=50)
        if not results['tracks']['items']:
            return None

        random_track = random.choice(results['tracks']['items'])
        artist = random_track['artists'][0]
        return sp.artist(artist['id'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞: {e}")
        return None


def send_artist_info(chat_id, artist):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        name = artist['name']
        genres = ", ".join(artist.get('genres', ['—Ä–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã']))[:100]
        popularity = artist.get('popularity', 0)
        followers = artist.get('followers', {}).get('total', 0)
        image_url = artist['images'][0]['url'] if artist.get('images') else None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-—Ç—Ä–µ–∫–∏ –∏ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        top_tracks = sp.artist_top_tracks(artist['id'])
        best_songs = [track['name'] for track in top_tracks['tracks'][:3]] if top_tracks else ["–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
        #spotify_url = artist['external_urls']['spotify']

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        #btn_spotify = types.InlineKeyboardButton(
        #    text="üéß –û—Ç–∫—Ä—ã—Ç—å –≤ Spotify",
        #    url=spotify_url
        #)
        btn_youtube = types.InlineKeyboardButton(
            text="üé• –ü–æ–∏—Å–∫ –Ω–∞ YouTube",
            url=f"https://www.youtube.com/results?search_query={name.replace(' ', '+')}"
        )
        btn_wiki = types.InlineKeyboardButton(
            text="üìñ –í–∏–∫–∏–ø–µ–¥–∏—è",
            url=f"https://ru.wikipedia.org/w/index.php?search={name.replace(' ', '+')}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        #btn_like = types.InlineKeyboardButton(
        #    text="üëç –ù—Ä–∞–≤–∏—Ç—Å—è",
        #    callback_data=f"like_{artist['id']}"
        #)
        btn_next = types.InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            callback_data="next_artist"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        markup.row(btn_youtube)
        markup.row(btn_wiki)
        markup.row(btn_next)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
                f"üéµ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–Ω—è:</b> <i>{name}</i>\n\n"
                f"üé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {genres}\n"
                f"‚≠ê <b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b> {popularity}/100\n"
                f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {followers:,}\n\n"
                f"üé∂ <b>–õ—É—á—à–∏–µ —Ç—Ä–µ–∫–∏:</b>\n" +
                "\n".join(f"‚Ä¢ {song}" for song in best_songs)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_url:
            bot.send_photo(
                chat_id,
                image_url,
                caption=message,
                parse_mode='HTML',
                reply_markup=markup
            )
        else:
            bot.send_message(
                chat_id,
                message,
                parse_mode='HTML',
                reply_markup=markup
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üò¢")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "next_artist":
        bot.answer_callback_query(call.id, "–ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...")
        artist = get_random_artist()
        if artist:
            send_artist_info(call.message.chat.id, artist)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è üò¢")
    elif call.data.startswith("like_"):
        artist_id = call.data.split("_")[1]
        bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚ù§Ô∏è")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–†–∞–Ω–¥–æ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–Ω–≥–µ—Äüí∏")
    btn2 = types.KeyboardButton("–ß–∞—Ä—Ç—ã VK –∏ –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω üî•")
    btn3 = types.KeyboardButton("Support")
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Ç //roskoshnyi.hub –∏ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–æ —á–∞—Ä—Ç–∞–º VK –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ –∫–µ—à –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ offline –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–∑—ã–∫–µ",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == "–†–∞–Ω–¥–æ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–Ω–≥–µ—Äüí∏")
def artist_handler(message):
    bot.send_message(message.chat.id, "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...")
    artist = get_random_artist()

    if artist:
        send_artist_info(message.chat.id, artist)
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


@bot.message_handler(func=lambda m: m.text == "–ß–∞—Ä—Ç—ã VK –∏ –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω üî•")
def favorites_handler(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if message.text == '–ß–∞—Ä—Ç—ã VK –∏ –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω üî•':
        bot.send_message(message.from_user.id,'–ü–æ–∏—Å–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ä—Ç–æ–≤ –í–ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ music –ø–æ ' + '[üëâ—Ç—É—Çüëà](https://t.me/roskosniyhubbot)',
                     parse_mode='Markdown')


@bot.message_handler(func=lambda m: m.text == "Support")
def settings_handler(message):
    if message.text == 'Support':
        bot.send_message(message.from_user.id,'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∏–ª–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ —Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ. ' + '[Tech support:](https://t.me/RYODAN_Qadery)',
                     parse_mode='Markdown')



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)